#!/bin/sh
#
# emacsc(1) - a wrapper of emacsclient(1)
#
# Copyright (c) 2012, 2013 Akinori MUSHA
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# See https://github.com/knu/emacsc for the latest information.

usage () {
    cat <<EOF >&2
usage: $(basename "$0") [-dk] [-e EXPR | -x EXPR | -f FUNC] [FILE..]

    -h, --help      show this help
    -d, --daemon    run Emacs as daemon and quit
    -k, --kill      kill Emacs daemon
    -e, --eval=EXPR
                    evaluate the Lisp expression EXPR and print the
                    result without a frame opened
    -x, --execute=EXPR
                    interactively execute the Lisp expression EXPR
    -f, --funcall=FUNC
                    interactively call the Lisp function FUNC

This command is a wrapper of emacsclient(1) for use within a terminal.
It adds the -t option so that Emacs opens a new frame on the current
terminal, making the command itself suitable as a value for EDITOR.

A byte-compiled initialization file is automatically removed before
running Emacs if outdated, i.e. older than the original file.

In order for -x and -f to work, emacsc.el must be loaded in your Emacs
initialization file.

    (require 'emacsc)
EOF
}

: ${ALTERNATE_EDITOR=}
export ALTERNATE_EDITOR

unset expr func quiet void
tty=t

while getopts dke:x:f:h-: opt; do
    if [ "$opt" = - ]; then
        case "$OPTARG" in
            *\=*)
                opt="${OPTARG%%=*}"
                OPTARG="${OPTARG#*=}"
                ;;
            *)
                opt="$OPTARG"
                unset OPTARG
                ;;
        esac
    fi

    case "$opt" in
        d|daemon)
            quiet=t
            expr="t"
            ;;
        k|kill)
            expr="(kill-emacs)"
            quiet=t
            ALTERNATE_EDITOR=false
            ;;
        e|eval)
            expr="$OPTARG"
            unset tty
            ;;
        x|execute)
            func="(lambda () (interactive) $OPTARG))"
            void=t
            ;;
        f|funcall)
            func="$OPTARG"
            void=t
            ;;
        h|help)
            usage
            exit
            ;;
        ??*)
            echo "$0: illegal long option -- $opt" >&2
            usage
            exit 64
            ;;
        *)
            usage
            exit 64
            ;;
    esac
done

shift $((OPTIND-1))

for el in "$HOME"/.emacs.d/init.el "$HOME"/.emacs.el  "$HOME"/.emacs; do
    if [ -f "$el" ]; then
        [ "$el" -nt "${el%.el}.elc" ] || rm -f "${el%.el}.elc"
        break
    fi
done

if [ -n "${func+t}" ]; then
    expr="(call-interactively (function $func))"
fi

if [ -n "${expr+t}" ]; then
    set -- -e "${void+@}$expr" "$@"
fi

if [ -n "${quiet+t}" ]; then
    exec emacsclient "$@" >/dev/null 2>&1
elif [ -n "${tty+t}" ]; then
    : ${TTY:=`tty 2>/dev/null`}
    : ${TTY:=/dev/tty}
    # emacsclient(1) calls ttyname() on stdout
    exec emacsclient -t "$@" >$TTY
else
    exec emacsclient "$@"
fi
